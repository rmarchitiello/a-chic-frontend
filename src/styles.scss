/* ========== STILE GLOBALE BASE ========== */
html, body {
  margin: 0;
  padding: 0;
  height: auto;
  min-height: 100vh;
  overflow-x: hidden;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  touch-action: manipulation;
}

/* ========== STILE PER DESKTOP (larghezza ‚â• 769px) ========== */
@media (min-width: 769px) {
  html, body {
    font-family: 'Montserrat', sans-serif; // Font elegante per desktop
    font-size: 16px;
    line-height: 1.6;
    color: #222;
  }

  .mat-sidenav-content {
    display: block;
    min-height: 100vh;
    overflow: visible;
  }
}

/* ========== STILE PER MOBILE (larghezza ‚â§ 768px) ========== */
@media (max-width: 768px) {
  html, body {
    font-family: 'Inter', sans-serif; // Font pi√π leggibile per mobile
    font-size: 15px;
    line-height: 1.5;
    color: #222;
  }

  .mat-sidenav-content {
    display: block;
    min-height: 100vh;
    overflow: visible;
  }
}

/* GESTIONE DEI POP UP E COME FUNZIONANO
Quando si applica un pop up

this.dialog.open(ComponentePopup, {
  data: { ... },
  panelClass: 'mia-classe-personalizzata'
});

viene generato nel dom

<div class="cdk-overlay-container">
  <div class="cdk-overlay-backdrop"></div>  <!-- Sfondo scuro (backdrop) -->
  
  <div class="cdk-global-overlay-wrapper">
    <div class="cdk-overlay-pane mia-classe-personalizzata">  <!-- Classe personalizzata -->
      <mat-dialog-container class="mat-mdc-dialog-container">
        <div class="mat-mdc-dialog-inner-container">
          <div class="mat-mdc-dialog-surface">
            <!-- Contenuto del TUO componente -->
            <app-mio-popup>
              <mat-dialog-content>
                <!-- Template del TUO componente -->
              </mat-dialog-content>
            </app-mio-popup>
          </div>
        </div>
      </mat-dialog-container>
    </div>
  </div>
</div>

.cdk-overlay-container
√à il contenitore "globale" creato automaticamente da Angular CDK.

Viene aggiunto direttamente al body.

Non modificarlo manualmente se non in casi eccezionali.

.cdk-overlay-backdrop
√à lo sfondo che rende scuro il resto della pagina quando un popup si apre.

Pu√≤ essere personalizzato con classi specifiche, se necessario.

.cdk-overlay-pane
√à il pannello vero e proprio che ospita il popup.

Qui puoi aggiungere una tua classe personalizzata tramite l‚Äôopzione panelClass nel metodo .open() del popup.

Subito dopo..

mat-dialog-container
√à il contenitore diretto del tuo popup.

Ha classi predefinite Angular Material come .mat-mdc-dialog-container.

Puoi personalizzare sfondi, padding, ecc. tramite il tuo CSS.


app-mio-popup
Questo √® il tuo componente Angular (es: ViewOrEditDescrizioneComponent).

Qui puoi definire il tuo template personalizzato e logica TypeScript.

e nel mio pop up uso
mat-dialog-content (opzionale ma consigliato)
√à un wrapper di contenuto che offre Angular Material.

Consigliato perch√© ha stili predefiniti (padding automatico).

*/

/*
Ora nell editor quandro apro il pop up

  // Apertura del dialog Angular Material per il componente ViewMetadata
this.dialog.open(ViewMetadata, {
  data: { urlFrontale: url, context: context },
  panelClass: 'popup-view-dialog' // Questo collega lo stile alla .cdk-overlay-pane
});
}

nel dom avro <div id="cdk-overlay-1" class="cdk-overlay-pane popup-view-dialog mat-mdc-dialog-panel" style="position: static;">

e posso modificare qui il pop up come deve essere class="cdk-overlay-pane popup-view-dialog mat-mdc-dialog-panel
e o lo faccio globalmente, o lo faccio nella classe che apre il pop up ovvero nel padre
usando ng deep, invece qua lo sto facendo globale tanto sono sicuro che la modifica impatta solo li

Quando apro un pop up di material quel bordo grigio
e delle classi base di material
.mat-mdc-dialog-container
.mdc-dialog__surface

che nel dom 

<div id="cdk-overlay-1" class="cdk-overlay-pane popup-view-dialog mat-mdc-dialog-panel" style="position: static;">
	<div tabindex="0" class="cdk-visually-hidden cdk-focus-trap-anchor" aria-hidden="true"/>
	<mat-dialog-container tabindex="-1" class="mat-mdc-dialog-container mdc-dialog cdk-dialog-container mdc-dialog--open" id="mat-mdc-dialog-1" role="dialog" aria-modal="false" style="--mat-dialog-transition-duration: 150ms;">
		<div class="mat-mdc-dialog-inner-container mdc-dialog__container">
			<div class="mat-mdc-dialog-surface mdc-dialog__surface">

      sono figli di popup-view-dialog e faccio cosi

      .cdk-overlay-pane.popup-view-dialog .mat-mdc-dialog-surface {
  background-color: #25d366 !important; // Verde acceso
  box-shadow: none !important;
  border-radius: 0 !important;
  padding: 0 !important;
}

perche uso .cdk-overlay-pane.popup-view-dialog.mat-mdc-dialog-panel {
 tutto attaccato (perche sono della stessa classe)

 .cdk-overlay-pane.popup-view-dialog .mat-mdc-dialog-surface {
qua no perche surface √® il figlio

Ora se ho due pop up come faccio a dire quello va sopra l'altro ? devo incidere sull asse z 

supponiamo faccio 
this.dialog.open(PopupBComponent, {
  panelClass: 'popup-b-zindex',
});


this.dialog.open(PopupAComponent, {
  panelClass: 'popup-a-zindex',
});

.cdk-overlay-pane.popup-b-zindex {
  z-index: 1000 !important;
}

.cdk-overlay-pane.popup-a-zindex {
  z-index: 1100 !important; // Questo sar√† sopra
}

A SARA SOPRA A B
non uso .cdk-overlay-pane.popup-a-zindex.mat-mdc-dialog-panel { ... }
 ma direttamente il contenitore padre

 Se a un pop up voglio assegnare un altezza larghezza ecc ho due strade, o faccio 
 this.dialog.open(ViewOrEditMetadataComponent, {
  panelClass: 'popup-view-dialog',
  width: '600px',          // oppure '80vw'
  height: '400px',         // oppure 'auto', '90vh', ecc.
  data: { ... }
});

o cosi
.cdk-overlay-pane.popup-view-dialog.mat-mdc-dialog-panel {
  width: 600px !important;      // oppure '80vw'
  height: 400px !important;     // oppure 'auto' o '90vh'
  max-height: 90vh !important;  // utile per scroll
  max-width: 95vw !important;


  In generale si fa cosi:

  ::ng-deep .cdk-overlay-pane.popup-admin-editor  lo uso per indicare una dimensione del pop up bordi ecc
    Lo stai usando per stilizzare il contenitore principale del dialog Material (quello che gestisce larghezza, altezza, bordo, ombre, posizione, z-index del popup). Questo √® esattamente il posto giusto dove agire per definire:
  width, height, max-width, max-height
  padding, margin
  border-radius
  box-shadow
  z-index
  pointer-events
  top, left

  ::ng-deep .popup-admin-editor .mat-mdc-dialog-content contenuto del pop pup scrollabile ecc..


  ::ng-deep .popup-admin-editor .mat-mdc-dialog-surface per indicare la superfice se trasparente o altro 
*/

  /* Overlay principale del popup con panelClass: 'popup-view-dialog' */
  .cdk-overlay-pane.popup-view-dialog.mat-mdc-dialog-panel { //opzionale specificare anche mat-mdc-dialog-panel 
    width: auto !important;
    height: auto !important;
    max-width: none !important;   // Rimuove limiti massimi
    max-height: none !important;  // Rimuove limiti massimi
    overflow: visible !important; // Permette espansione    

    border-radius: 0 !important;     // Rimuove angoli stondati
    box-shadow: none !important;     // Rimuove ombra esterna
    padding: 0 !important;           // Rimuove padding interno
    overflow: visible !important;    // Permette elementi fuori dal riquadro (es. effetti o frecce)
    pointer-events: auto !important; // Garantisce l'interazione (hover/click)
  }

  /* Superficie interna del dialog Material */
  .cdk-overlay-pane.popup-view-dialog .mat-mdc-dialog-surface {
    background-color: transparent !important; // Sfondo trasparente
    box-shadow: none !important;              // Nessuna ombra
    border-radius: 0 !important;              // Nessun bordo stondato interno
    padding: 0 !important;                    // Rimuove padding interno
  }


/* ora da qui in po mettero tutti i pop up nelle classi padre senza intaccare lo style scss quindi xon ng deep */


/* Applica a TUTTI i dialog (popup) Angular Material */
.cdk-overlay-backdrop {
  background-color: rgba(0, 0, 0, 0.7) !important;  // pi√π scuro
  backdrop-filter: blur(5px);                      // effetto sfocato
}

/* ============================================================
   DIALOG UPLOAD: Scroll naturale con MDC (Material Design Components)
   Applicato con: panelClass: 'upload-dialog'

   Obiettivo:
   - Consentire che il contenuto interno del dialog scrolli
     solo se eccede l‚Äôaltezza disponibile.
   - Evitare scroll del contenitore esterno (container).
   - Rimuovere margini/padding inutili che causano layout errato.
============================================================ */




/*  Stilizzo il contenitore esterno del dialog (involucro generale) */
::ng-deep .upload-dialog .mat-mdc-dialog-container {
  width: 1000px;
  height: 1000px;
  max-height: 1000px;
  padding: 0;
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
}

/* üî∏ Contenuto scrollabile interno */
::ng-deep .upload-dialog .mat-mdc-dialog-content {
  flex: 1;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  min-height: 0; // Cruciale per scroll interno in layout flex
}






