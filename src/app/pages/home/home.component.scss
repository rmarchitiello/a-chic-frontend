/* =============================================================================
   HOME COMPONENT (unico template per desktop + mobile) — versione NGX-FLICKING
   - Mantiene background bianco
   - Alcune sezioni “sanguinano” a tutta larghezza (full-bleed)
   - Gestione pannelli/carousel con @egjs/ngx-flicking
   ========================================================================== */

:host {
  display: block;
  background: #fff; /* sfondo coerente con il resto della pagina */
}

.home,
.home-container {
  background: #fff;
  width: 100%;
  margin: 0 auto;
}

/* Evita che le immagini/ video siano “trascinabili” dal browser */
.carosello-panel img,
.carosello-panel video {
  -webkit-user-drag: none;   /* Safari/Chrome */
}

/* =============================================================================
   HEADER DI SEZIONE (titolo + pulsante admin)
   - Da usare sopra ciascun carosello
   ========================================================================== */
.carousel-section-header {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin: 1rem 0;

  h2 {
    margin: 0;
    color: #222;
    font-size: 1.4rem;
    font-weight: 800;
  }

  .edit-admin-icon {
    position: absolute;
    top: 12px;
    right: 12px;
    z-index: 10;
    background: rgba(255, 255, 255, 0.85);
    mat-icon { color: #000; }
  }
}

/* =============================================================================
   UTILITY FULL-BLEED
   - Consente a blocchi specifici di estendersi ai bordi viewport
   ========================================================================== */
@mixin full-bleed {
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
  background: #fff;
}





/* Wrapper per il carosello principale (HERO)
   >>> APPLICA: otherOption.wrapperClass = 'flicking-hero' sul primo carosello
   NOTE:
   - L’altezza NON è impostata qui per evitare conflitti tra breakpoint.
   - I breakpoint sotto imposteranno l’altezza (100vh mobile, 70vh desktop).
*/
.flicking-hero {
  @include full-bleed();
  overflow: hidden;       /* evita bande/overflow */
  position: relative;     /* base per frecce/paginazione in assoluto */
  background: transparent;/* evita “fasce” sotto il media */
}

/* =============================================================================
   PANNELLI NGX-FLICKING (stile base)
   ========================================================================== */
.carosello-panel {
  overflow: hidden;
  width: 100%;
  height: 220px;        /* altezza base per pannelli NON-hero su mobile */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  background: #eee;
  border-radius: 0;     /* bordo dei pannelli (0 = squadrato) */
  margin: 0 8px;
  font-weight: 600;

  img,
  video {
    max-width: 100%;
    max-height: 100%;
    object-fit: cover;      /* copre l’area del pannello */
    object-position: center;
    border-radius: inherit; /* eredita la curvatura del pannello */
    display: block;
    background: #fff;
  }

  audio {
    width: 80%;
    display: block;
  }
}

/* Placeholder quando non ci sono media */
.media-placeholder {
  font-size: 14px;
  color: #666;
  text-align: center;
  padding: 1rem;
}

/* =============================================================================
   PANELCLASS (da passare in TS → otherOption.panelClass)
   - 'panel-hero'    → pannello dell’hero (segue SEMPRE l’altezza del wrapper)
   - 'panel-card'    → pannelli più compatti (modelli/creazioni)
   ========================================================================== */



.panel-hero {
  @extend .carosello-panel;
  /* Punto chiave: l’hero NON definisce qui un’altezza fissa,
     ma segue quella del wrapper (.flicking-hero) */
  height: auto;
  border-radius: 0;   /* full-bleed: niente bordi arrotondati */
  margin: 0;

  img,
  video {
    width: 100%;
    height: 100%;
    object-fit: cover; /* copre tutto senza bande */
  }
}

.panel-card {
  @extend .carosello-panel;
  height: 300px;

  img,
  video { object-fit: contain; }
}



/* =============================================================================
   UTILITY: nascondi elementi via classe (es. frecce condizionali)
   ========================================================================== */
.none { display: none !important; }

/* =============================================================================
   FRECCE E PAGINAZIONE NGX-FLICKING
   - Paginazione default aggiunge spazio sotto (margin-top).
   - Nell’HERO la spostiamo in ASSOLUTO sopra l’immagine per non aumentare l’altezza.
   ========================================================================== */

/* Frecce: posizione generale (affinata nell’hero sotto) */
:host ::ng-deep .flicking-arrow-prev { left: 40px !important; }
:host ::ng-deep .flicking-arrow-next { right: 40px !important; }

/* Paginazione default (per caroselli NON-hero) */
:host ::ng-deep .flicking-pagination {
  margin-top: 12px;
  text-align: center;
}

:host ::ng-deep .flicking-pagination-bullet {
  display: inline-block;
  width: 8px;
  height: 8px;
  margin: 0 4px;
  border-radius: 50%;
  background-color: rgba(10, 10, 10, 0.2);
  cursor: pointer;
  transition: background-color 0.3s;
}

:host ::ng-deep .flicking-pagination-bullet-active { background-color: #333; }

/* HERO: paginazione e frecce in posizione assoluta dentro il wrapper */
:host ::ng-deep .flicking-hero .flicking-pagination {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 24px;  /* posiziona i pallini dentro l’hero */
  margin-top: 0; /* niente spazio extra sotto */
  z-index: 2;    /* sopra al media */
}

:host ::ng-deep .flicking-hero .flicking-arrow-prev,
:host ::ng-deep .flicking-hero .flicking-arrow-next {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 2;
}

/* =============================================================================
   RESPONSIVE — MOBILE (≤ 768px)
   OBIETTIVO: HERO a schermo pieno (100vh) su mobile
   - Impostiamo l’altezza SOLO sul wrapper .flicking-hero.
   - Il pannello .panel-hero segue con height: 100%.
   ========================================================================== */
@media (max-width: 768px) {
  .home-container { padding: 0; }

  /* HERO mobile: full viewport */
  .flicking-hero {
    height: 100vh;  /* <<< richiesta: 100vh su mobile */
  }

  /* Pannelli NON-hero su mobile */
  .carosello-panel {
    margin: 0 6px;
    border-radius: 0;
  }

  :host ::ng-deep .flicking-pagination { margin-top: 8px; }
  :host ::ng-deep .flicking-arrow-prev { left: 16px !important; }
  :host ::ng-deep .flicking-arrow-next { right: 16px !important; }

  .carousel-section-header {
    margin: 0.75rem 0;

    h2 { font-size: 1.2rem; font-weight: 800; }

    .edit-admin-icon {
      top: 8px; right: 8px;
      background: rgba(255, 255, 255, 0.9);
    }
  }
}

/* =============================================================================
   RESPONSIVE — DESKTOP (≥ 769px)
   OBIETTIVO: HERO più basso (70vh) su desktop
   - Impostiamo 70vh sul wrapper .flicking-hero.
   - Il pannello .panel-hero segue con height: 100%.
   ========================================================================== */
@media (min-width: 769px) {
  .home-container { padding: 0; }

  /* HERO desktop: 70vh come richiesto */
  .flicking-hero {
    height: 100vh;   /* <<< richiesta: 70vh su desktop */
  }

  /* Pannelli NON-hero su desktop */
  .carosello-panel {
    margin: 0 10px;
    border-radius: 12px;
  }

  :host ::ng-deep .flicking-pagination { margin-top: 14px; }
  :host ::ng-deep .flicking-arrow-prev { left: 40px !important; }
  :host ::ng-deep .flicking-arrow-next { right: 40px !important; }

  .carousel-section-header {
    margin: 1rem 0 1.25rem;

    h2 { font-size: 1.6rem; font-weight: 800; }

    .edit-admin-icon {
      top: 16px; right: 16px;
      background: rgba(255, 255, 255, 0.75);
    }
  }
}

/* =============================================================================
   NOTE OPERATIVE — DOVE APPLICARE COSA (RIEPILOGO)
   - Nel TS, per l’HERO (primo carosello):
       otherOption.wrapperClass = 'flicking-hero'
       otherOption.panelClass   = 'panel-hero'
     Negli altri caroselli:
       otherOption.wrapperClass = 'flicking-default'
       otherOption.panelClass   = 'panel-default' o 'panel-card'
   - Nel template:
       <ngx-flicking [ngClass]="car.otherOption.wrapperClass"> ...
       <div flicking-panel [ngClass]="['carosello-panel', car.otherOption.panelClass]"> ...
   - L’altezza dell’hero è gestita SOLO via CSS:
       mobile  → .flicking-hero { height: 100vh; }
       desktop → .flicking-hero { height: 70vh; }
     Il pannello dell’hero segue con height: 100%.
   - La paginazione nell’HERO è in assoluto per non aggiungere margine in basso.
   - Se hai header fixed e vuoi sottrarlo dall’hero, puoi usare:
       .flicking-hero { height: calc(100vh - var(--header-h)); }
     e definire --header-h nel layout.
   ========================================================================== */




/* Animazioni globali per carosello*/
/* =============================================================================
   ANIMAZIONI
   ========================================================================== */
@keyframes zoomInReturnLinear {
  0% { transform: scale(1.5); opacity: 0.7; }
  100% { transform: scale(1);   opacity: 1; }
}

.zoom-enter {
  animation: zoomInReturnLinear 1000ms linear both;
  transform-origin: center center;
}