/* =============================================================================
   HOME COMPONENT (unico template per desktop + mobile) — versione NGX-FLICKING
   Obiettivo: titolo overlay centrato e bianco su TUTTI i caroselli, fermo sopra
   alle slide (perché è fratello del carosello dentro un wrapper comune).
   Nota: il wrapper del carosello fa da “ancora” (position: relative) per overlay
   e controlli. L’hero è full-bleed, gli altri caroselli no.

   Perché si mette > tra .flicking-hero e ngx-flicking:

Uso il combinatore di figli diretti (>) per dire “applica questa regola solo all’elemento <ngx-flicking> che è figlio immediato del wrapper hero”.

Questo è importante per due motivi pratici:

Propagazione dell’altezza corretta: voglio che l’istanza di Flicking prenda esattamente l’altezza del wrapper hero (height: 100%). Se scrivessi .flicking-hero ngx-flicking senza >, potrei colpire anche eventuali Flicking nidificati più in profondità, o elementi simili introdotti in futuro, con effetti collaterali.

Specificità strutturale: vincolo lo stile alla struttura prevista (wrapper → flicking). Se domani qualcuno inserisce un <div> intermedio, la regola non si applica “per sbaglio” a discendenti non desiderati; sarà evidente che bisogna aggiornare il selettore.

In breve: il > serve per precisione e per evitare che la regola di altezza venga ereditata da discendenti non intenzionati, garantendo che l’allineamento del titolo sull’hero resti consistente.
   ========================================================================== */

/* Struttura base pagina */
:host {
  display: block;
  background: #fff; /* sfondo coerente con il resto della pagina */
}

.home,
.home-container {
  background: #fff;
  width: 100%;
  margin: 0 auto;
}

/* Evito che immagini/video siano trascinabili o selezionabili dal browser */
.carosello-panel img,
.carosello-panel video {
  -webkit-user-drag: none; /* Safari/Chrome */
  user-select: none;
  -webkit-user-select: none;
}

/* =============================================================================
   HEADER DI SEZIONE (solo pulsante admin; il titolo è overlay nel wrapper)
   - Qui mantengo solo l’icona “edit”; il titolo visivo è gestito come overlay.
   ========================================================================== */
.carousel-section-header {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: flex-end; /* il titolo non è qui, tengo solo l’icona admin */
  margin: 1rem 0;

  .edit-admin-icon {
    position: absolute;
    top: 12px;
    right: 12px;
    z-index: 10; /* superiore ai contenuti circostanti, ma sotto alle frecce del carosello */
    background: rgba(255, 255, 255, 0.85);

    mat-icon { color: #000; }
  }
}

/* =============================================================================
   UTILITY FULL-BLEED
   - La uso per far “sanguinare” l’hero ai bordi viewport (senza padding laterali).
   - Attenzione: full-bleed spinge il blocco a 100vw; evito overflow orizzontali
     lasciando che il wrapper prenda il controllo dell’overflow.
   ========================================================================== */
@mixin full-bleed {
  width: 100vw;
  position: relative;
  left: 50%;
  right: 50%;
  margin-left: -50vw;
  margin-right: -50vw;
  background: #fff;
}

/* =============================================================================
   WRAPPER CAROSELLO (comune a TUTTI i caroselli)
   - Questo è il contenitore padre che “ancora” overlay e controlli.
   - Deve essere position: relative per consentire posizionamenti assoluti interni.
   - L’hero eredita full-bleed; i caroselli standard restano nel contenuto.
   ========================================================================== */
.carousel-wrapper {
  position: relative; /* fondamentale: ancora per overlay e controlli */
  overflow: hidden;   /* evito sbordamenti laterali/verticali del media */
  background: transparent;
}

/* Wrapper specifico per HERO (full-bleed e altezza gestita con media queries) */
.flicking-hero {
  @include full-bleed();
  /* Mantengo anche le proprietà base del wrapper generico */
  position: relative;
  overflow: hidden;
  background: transparent;
}

/* Wrapper per caroselli non-hero: resta “in pagina” (no full-bleed) */
.flicking-default {
  position: relative;
  overflow: hidden;
  background: transparent;
}

/* =============================================================================
   OVERLAY TITOLO (valido per TUTTI i caroselli)
   - Il blocco copre l’area del wrapper (.carousel-wrapper) e centra l’h2.
   - Non intercetta i tocchi (pointer-events: none) per non bloccare swipe/click.
   - Layer: sopra ai pannelli, sotto a frecce/paginazione.
   ========================================================================== */
.carousel-title-overlay {
  /* L’overlay è FRATELLO di <ngx-flicking> dentro .carousel-wrapper */
  position: absolute;
  inset: 0;                 /* copre esattamente l’area del wrapper */
  display: flex;
  align-items: center;
  justify-content: center;  /* centro il titolo sia in orizzontale che in verticale */
  padding: 0 16px;          /* respiro orizzontale su device piccoli */
  pointer-events: none;     /* i gesti passano al carosello e alle frecce */
  z-index: 2;               /* sopra ai pannelli (base), sotto alle frecce/paginazione */
}

.carousel-title {
  margin: 0;
  color: #fff;              /* titolo bianco come richiesto */
  text-align: center;
  font-weight: 800;
  text-transform: uppercase;
  letter-spacing: .02em;
  line-height: 1.1;
  /* ombra leggera per leggibilità su foto chiare */
  text-shadow: 0 1px 2px rgba(0, 0, 0, .35);
  /* dimensioni regolate nei breakpoint */
}

/* =============================================================================
   PANNELLI NGX-FLICKING (stile base)
   - Questa è la base condivisa; le varianti (hero/card) estendono qui sotto.
   ========================================================================== */
.carosello-panel {
  overflow: hidden;
  width: 100%;
  height: 220px;        /* altezza base per pannelli NON-hero su mobile */
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  background: #eee;
  border-radius: 0;
  margin: 0 8px;        /* spaziatura orizzontale tra card non-hero */
  font-weight: 600;

  img,
  video {
    max-width: 100%;
    max-height: 100%;
    object-fit: cover;     /* riempie il pannello senza distorsioni */
    object-position: center;
    border-radius: inherit;
    display: block;
    background: #fff;
  }

  audio {
    width: 80%;
    display: block;
  }
}

/* Placeholder quando non ci sono media */
.media-placeholder {
  font-size: 14px;
  color: #666;
  text-align: center;
  padding: 1rem;
}

/* =============================================================================
   VARIANTI PANELCLASS (da passare in TS → otherOption.panelClass)
   - 'panel-hero' → pannello dell’hero: segue SEMPRE l’altezza del wrapper
   - 'panel-card' → pannelli compatti per sezioni “card”
   ========================================================================== */

/* Pannello hero: riempie l’altezza del wrapper hero */
.panel-hero {
  @extend .carosello-panel;
  height: 100%;     /* chiave: segue .flicking-hero { height: ... } */
  border-radius: 0; /* full-bleed: niente angoli arrotondati */
  margin: 0;        /* nessuna spaziatura orizzontale tra slide hero */

  img,
  video {
    width: 100%;
    height: 100%;
    object-fit: cover; /* copre completamente l’area dell’hero */
  }
}

/* Pannelli a “card”: più alti e con media contenuti */
.panel-card {
  @extend .carosello-panel;
  height: 300px;

  img,
  video { object-fit: contain; }
}

/* =============================================================================
   FRECCE E PAGINAZIONE NGX-FLICKING
   - Uso la classe .none per la visibilità (niente *ngIf sugli elementi).
   - In HERO posiziono controlli in assoluto all’interno del wrapper.
   - Layering: frecce/paginazione sopra a titolo overlay (z-index maggiore).
   ========================================================================== */

/* Utility per “nascondere” senza rimuovere dal DOM */
:host ::ng-deep .none {
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
}

/* Posizione generale frecce (affinata nell’hero) */
:host ::ng-deep .flicking-arrow-prev { left: 40px !important; z-index: 3; }
:host ::ng-deep .flicking-arrow-next { right: 40px !important; z-index: 3; }

/* Paginazione default (caroselli non-hero): riga sotto il carosello */
:host ::ng-deep .flicking-pagination {
  margin-top: 12px;
  text-align: center;
  z-index: 3; /* mantengo sopra eventuali sovrapposizioni locali */
}

:host ::ng-deep .flicking-pagination-bullet {
  display: inline-block;
  width: 8px;
  height: 8px;
  margin: 0 4px;
  border-radius: 50%;
  background-color: rgba(10, 10, 10, 0.2);
  cursor: pointer;
  transition: background-color 0.3s;
}

:host ::ng-deep .flicking-pagination-bullet-active { background-color: #333; }

/* HERO: paginazione e frecce in assoluto dentro il wrapper hero */
:host ::ng-deep .flicking-hero .flicking-pagination {
  position: absolute;
  left: 0;
  right: 0;
  bottom: 24px;  /* pallini all’interno dell’hero, verso il fondo */
  margin-top: 0; /* nessuno spazio extra sotto */
  z-index: 3;    /* sopra al titolo overlay (che sta a 2) */
}

:host ::ng-deep .flicking-hero .flicking-arrow-prev,
:host ::ng-deep .flicking-hero .flicking-arrow-next {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  z-index: 3; /* frecce sopra al titolo overlay */
}

/* =============================================================================
   ALTEZZE: propago il 100% dal wrapper hero al contenuto Flicking
   - Senza questo passaggio il titolo risulta centrato rispetto a un wrapper più alto
     del contenuto reale e “scivola” nella fascia bianca.
   - Uso il combinatore di figli diretti (>) per colpire SOLO ngx-flicking figlio
     del wrapper hero, evitando effetti collaterali.
   ========================================================================== */

/* 1) L’istanza <ngx-flicking> deve occupare tutta l’altezza del wrapper hero */
.flicking-hero > ngx-flicking {
  display: block;   /* di default è inline-level; lo porto a block-level */
  height: 100%;     /* prendo l’altezza fissata sul wrapper (.flicking-hero) */
}

/* 2) Anche viewport e camera interne devono allungarsi a 100% dell’hero */
:host ::ng-deep .flicking-hero .flicking-viewport,
:host ::ng-deep .flicking-hero .flicking-camera {
  height: 100%;
}

/* =============================================================================
   RESPONSIVE — MOBILE (≤ 768px)
   - HERO a schermo pieno (100vh)
   - Titolo dimensionato per mobile
   - Card non-hero più “piatte” e senza angoli
   ========================================================================== */
@media (max-width: 768px) {
  .home-container { padding: 0; }

  /* HERO mobile: full viewport (valuta 100dvh/svh su iOS se serve) */
  .flicking-hero { height: 100vh; }

  /* Titolo in scala per mobile */
  .carousel-title { font-size: 24px; }

  /* Pannelli NON-hero su mobile: margini più stretti, senza radius */
  .carosello-panel {
    margin: 0 6px;
    border-radius: 0;
  }

  :host ::ng-deep .flicking-pagination { margin-top: 8px; }
  :host ::ng-deep .flicking-arrow-prev { left: 16px !important; }
  :host ::ng-deep .flicking-arrow-next { right: 16px !important; }

  .carousel-section-header {
    margin: 0.75rem 0;

    .edit-admin-icon {
      top: 8px; right: 8px;
      background: rgba(255, 255, 255, 0.9);
    }
  }
}

/* =============================================================================
   RESPONSIVE — DESKTOP (≥ 769px)
   - HERO più basso (70vh)
   - Titolo più grande
   - Card non-hero con radius e margini più ampi
   ========================================================================== */
@media (min-width: 769px) {
  .home-container { padding: 0; }

  /* HERO desktop: 70vh come obiettivo estetico */
  .flicking-hero { height: 70vh; }

  /* Titolo in scala per desktop */
  .carousel-title { font-size: 36px; }

  /* Pannelli NON-hero su desktop: più respiro e angoli arrotondati */
  .carosello-panel {
    margin: 0 10px;
    border-radius: 12px;
  }

  :host ::ng-deep .flicking-pagination { margin-top: 14px; }
  :host ::ng-deep .flicking-arrow-prev { left: 40px !important; }
  :host ::ng-deep .flicking-arrow-next { right: 40px !important; }

  .carousel-section-header {
    margin: 1rem 0 1.25rem;

    .edit-admin-icon {
      top: 16px; right: 16px;
      background: rgba(255, 255, 255, 0.75);
    }
  }
}

/* =============================================================================
   ANIMAZIONI CAROSELLO (classe applicata su cambio slide)
   - Uso .zoom-enter come classe di animazione riattivabile ad ogni change.
   ========================================================================== */
@keyframes zoomInReturnLinear {
  0% { transform: scale(1.1); opacity: 0.7; }
  100% { transform: scale(1);   opacity: 1; }
}

.zoom-enter {
  animation: zoomInReturnLinear 1000ms linear both;
  transform-origin: center center;
}
